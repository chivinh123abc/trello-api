import { StatusCodes } from 'http-status-codes'
import { env } from '~/config/environment'
import { JwtProvider } from '~/providers/JwtProvider'
import ApiError from '~/utils/ApiError'

// Middleware n√†y s·∫Ω ƒë·∫£m nhi·ªám vi·ªác quan tr·ªçng, X√°c th·ª±c accessToken nh·∫≠n ƒë∆∞·ª£c t·ª´  ph√≠a FE c√≥ h·ª£p l·ªá hay k
const isAuthorized = async (req, res, next) => {
  // L·∫•y accessToken n·∫±m trong request cookies ph√≠a clients - withCredentials trong file authorizeAxios
  const clientAccessToken = req.cookies?.accessToken
  // N·∫øu clientAccessToken kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói
  if (!clientAccessToken) {
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized! (token not found)'))
    return
  }

  try {
    // B∆∞·ªõc 1: Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ h·ª£p l·ªá hay kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(
      clientAccessToken,
      env.ACCESS_TOKEN_SECRET_SIGNATURE
    )
    // console.log('üöÄ ~ isAuthorized ~ accessTokenDecoded:', accessTokenDecoded)
    // B∆∞·ªõc 2: Quan tr·ªçng: N·∫øu nh∆∞ token h·ª£p l·ªá, th√¨ c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o req.jwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫ßng x·ª≠ l√Ω ph√≠a sau
    req.jwtDecoded = accessTokenDecoded
    // B∆∞·ªõc 3: Cho ph√©p request ƒëi ti·∫øp
    next()
  } catch (error) {
    // console.log('üöÄ ~ isAuthorized ~ error:', error)
    // N·∫øu accessToken b·ªã h·∫øt h·∫°n (expired) th√¨ c·∫ßn tr·∫£ v·ªÅ m·ªôt m√£ l·ªói GONE - 410 cho FE bi·∫øt ƒë·ªÉ g·ªçi api refreshToken
    if (error?.message?.includes('jwt expired')) {
      next(new ApiError(StatusCodes.GONE, 'Need to refresh token.'))
      return
    }
    // N·∫øu accessToken kh√¥ng h·ª£p l·ªá do b·∫•t k√¨ ƒëi·ªÅu g√¨ kh√°c h·∫øt h·∫°n th√¨ tr·∫£ v·ªÅ l·ªói 401 cho FE g·ªçi api sign_out
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized!'))
  }
}

export const authMiddleware = {
  isAuthorized
}